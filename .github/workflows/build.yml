name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Build:
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu", "macos", "windows"]
        python-version: ["3.10"]

    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install -U pip # to ensure version > 20 to have cache dir
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Pip Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ matrix.task }}-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}


      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0rc2
          virtualenvs-create: true

      - name: Update PATH in Windows
        if: matrix.os == 'windows'
        run: |
          Add-Content -Path $env:GITHUB_PATH -Value "$env:USERPROFILE\.poetry\bin"
          Get-Content -Path $env:GITHUB_PATH

      - name: Configure Poetry to not use experimental installer
        run: |
          poetry config experimental.new-installer false

      - name: Install dependencies
        run: |
          poetry install

      - name: Export requirements file from lock file
        run: |
          poetry export -f requirements.txt --output requirements.txt

      - name: Build the executable
        run: |
          poetry run pyoxidizer build

      - name: Create zip file of the build
        run: |
          python -c "import shutil; shutil.make_archive('release', 'zip', 'build/dist/')"

      - uses: actions/upload-artifact@v3
        with:
          name: Enopios-${{ runner.os }}
          path: |
            release.zip
